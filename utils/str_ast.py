import ast
import json


def get_values(node):
    result = ""
    for value in node.values:
        if isinstance(value, ast.Str):
            result += value.s
        elif isinstance(value, ast.FormattedValue):
            result += "{" + get_formatted_value(value.value) + "}"
        elif isinstance(value, ast.JoinedStr):
            result += get_formatted_value(value)
    return result


def get_formatted_value(node):
    if isinstance(node, ast.JoinedStr):
        return get_values(node)
    elif isinstance(node, ast.Str):
        return json.dumps(node.s)
    elif isinstance(node, ast.Name):
        return node.id
    elif isinstance(node, ast.Subscript):
        slice_value = get_formatted_value(node.slice)
        value = get_formatted_value(node.value)
        return f"{slice_value}[{value}]"
    elif isinstance(node, ast.Attribute):
        value = get_formatted_value(node.value)
        return f"{value}.{node.attr}"
    elif isinstance(node, ast.Call):
        func_name = get_formatted_value(node.func)
        args = ", ".join(get_formatted_value(arg) for arg in node.args)
        return f"{func_name}({args})"
    elif isinstance(node, ast.Constant):
        try:
            return json.dumps(node.value)
        except:
            return str(node.value)
    else:
        return ast.dump(node)
