import logging
import shutil


class Colors:
    white = "\x1b[0;1m"
    grey = "\x1b[1;37m"
    pink = "\x1b[1;35m"
    yellow = "\x1b[1;33m"
    red = "\x1b[31;20m"
    bold_red = "\x1b[31;1m"
    blue = "\x1b[1;34m"
    reset = "\x1b[0m"


class CustomFormatter(logging.Formatter):
    format = "%(message)s"

    FORMATS = {
        logging.DEBUG: Colors.grey + format + Colors.reset,
        logging.INFO: Colors.grey + format + Colors.reset,
        logging.WARNING: Colors.pink + format + Colors.reset,
        logging.ERROR: Colors.red + format + Colors.reset,
        logging.CRITICAL: Colors.bold_red + format + Colors.reset
    }

    def __init__(self, use_color=True, use_centering=False, use_lines=False):
        super().__init__()
        self.width = shutil.get_terminal_size().columns
        self.use_color = use_color
        self.use_centering = use_centering
        self.use_lines = use_lines

    def format(self, record):
        if self.use_color:
            log_fmt = self.FORMATS.get(record.levelno)
            formatter = logging.Formatter(log_fmt)
            record = formatter.format(record)

        if self.use_centering:
            record = record.center(self.width)

        if self.use_lines:
            separator_line = '-' * self.width
            record = f"{separator_line}\n{record}\n{separator_line}"

        return record


logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

ch = logging.StreamHandler()
logger.addHandler(ch)


def log(message, level=logging.INFO, color=True, center=False, lines=False):
    record = logging.LogRecord(__name__, level, '', 0, message, (), None, None, '')

    formatter = CustomFormatter(use_color=color, use_centering=center, use_lines=lines)
    formatted_message = formatter.format(record)

    logger.handle(logging.makeLogRecord({'msg': formatted_message, 'levelno': level}))
