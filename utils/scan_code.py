import ast
import logging

from config import settings, BLACKLISTED_BASE64_PACKAGES, BLACKLISTED_INTERNET_PACKAGES
from utils.str_ast import get_formatted_value
from .custom_logger import log
from .print_imports_calls import print_imports_calls

BLACKLISTED_IMPORTS = settings.get('BLACKLISTED_IMPORTS')
BLACKLISTED_FUNCTIONS = settings.get('BLACKLISTED_FUNCTIONS')
BASE64_NEEDED = settings.get('BASE64')
INTERNET_ACCESS_NEEDED = settings.get('INTERNET_ACCESS')


def scan_code(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        code = file.read()

    try:
        # imports with data in format (line_number, [(name, asname), ...], module_name if imported from)
        # calls with data in format (line_number, package_name, node_name, serialized_args)
        suspicious_imports = []
        suspicious_calls = []
        base64_imports, base64_calls = [], []
        internet_imports, internet_calls = [], []

        # (module_name, [name or asname, ...]) of the imported attrs using "from" (ast can't check it by itself)
        imports_from = []

        tree = ast.parse(code, filename=file_path)
        for node in ast.walk(tree):
            if isinstance(node, ast.Call):
                package_name = None

                if isinstance(node.func, ast.Attribute):
                    node_name = node.func.attr
                    if hasattr(node.func.value, 'id'):
                        package_name = node.func.value.id
                elif isinstance(node.func, ast.Name):
                    node_name = node.func.id
                else:
                    continue

                node_name = node.func.attr if package_name else node_name

                if not package_name:
                    for module_name, attributes in imports_from:
                        for attribute in attributes:
                            if node_name == attribute:
                                package_name = module_name
                                break

                list_to_append = []
                if node_name in BLACKLISTED_FUNCTIONS:
                    list_to_append = suspicious_calls
                if package_name and package_name in BLACKLISTED_BASE64_PACKAGES:  # base64 call check
                    list_to_append = base64_calls
                if package_name and package_name in BLACKLISTED_INTERNET_PACKAGES:  # internet usage check
                    list_to_append = internet_calls

                serialized_args = [get_formatted_value(arg) for arg in node.args]

                list_to_append.append((node.lineno, package_name, node_name, serialized_args))
            elif isinstance(node, ast.Import):
                for alias in node.names:
                    if alias.name in BLACKLISTED_IMPORTS:
                        suspicious_imports.append(
                            (node.lineno, [(name.name, name.asname) for name in node.names]))
                    if alias.name in BLACKLISTED_BASE64_PACKAGES:
                        base64_imports.append(
                            (node.lineno, [(name.name, name.asname) for name in node.names]))
                    if alias.name in BLACKLISTED_INTERNET_PACKAGES:
                        internet_imports.append(
                            (node.lineno, [(name.name, name.asname) for name in node.names]))
            elif isinstance(node, ast.ImportFrom):
                list_to_append = []
                if node.module in BLACKLISTED_IMPORTS:
                    list_to_append = suspicious_imports
                if node.module in BLACKLISTED_BASE64_PACKAGES:
                    list_to_append = base64_imports
                if node.module in BLACKLISTED_INTERNET_PACKAGES:
                    list_to_append = internet_imports

                list_to_append.append((node.lineno, [(name.name, name.asname) for name in node.names], node.module))
                imports_from.append((node.module, [name.asname if name.asname else name.name for name in node.names]))

        # print
        log('\n')
        log(file_path, center=True, lines=True)

        if suspicious_imports:
            log(f'====== SUSPICIOUS IMPORTS ======\n', logging.WARNING)
            print_imports_calls(file_path, imports=suspicious_imports)
            log(f'====== SUSPICIOUS IMPORTS ======\n', logging.WARNING)
        if suspicious_calls:
            log(f'====== SUSPICIOUS CALLS ======\n', logging.WARNING)
            print_imports_calls(file_path, calls=suspicious_calls)
            log(f'====== SUSPICIOUS CALLS ======', logging.WARNING)
        if not BASE64_NEEDED and (base64_imports or base64_calls):
            log(f'====== BASE64 ======\n', logging.WARNING)
            print_imports_calls(file_path, base64_imports, base64_calls)
            log(f'====== BASE64 ======', logging.WARNING)
        if not INTERNET_ACCESS_NEEDED and (internet_imports or internet_calls):
            log(f'====== INTERNET ACCESS ======\n', logging.WARNING)
            print_imports_calls(file_path, internet_imports, internet_calls)
            log(f'====== INTERNET ACCESS ======', logging.WARNING)
    except SyntaxError as e:
        log(f"Syntax error: {e}", logging.WARNING)
